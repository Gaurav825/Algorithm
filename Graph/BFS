class Graph{
public:
  int V;
  vector<list<int>> adj;

    Graph(int V);
    void addEdge(int v, int w);
    void BFS(int s);
    vector<int> bfsOfGraph(int V, vector<list<int>> adj);
    
};
Graph::Graph(int V)
{
    this->V = V;
    adj.resize(V);
}
void Graph::addEdge(int u,int v)
{
    adj[u].push_back(v);



}
// bfs code to copy
vector<int> Graph::BFS(int s)
{

    queue<int>q;
    q.push(s);
    vector<bool>vis(V,0);

    vis[s]=1;
    vector<int>bfs;
    while(!q.empty())
    {
        int x=q.front();
       bfs.push_back(x);
        q.pop();
        for(int y:adj[x])
        {

            if(!vis[y])
                {
                    q.push(y);
                    vis[y]=1;
                }
        }


    }
    return bfs;
}
// copy for bfs for directed not directed and disconnected graph bfs 
vector<int> Graph::bfsOfGraph(int V, vector<list<int>> adj)
{
    vector<int> bfs_traversal;
    vector<bool> vis(V, false);
    for (int i = 0; i < V; ++i) {

        // To check if already visited
        if (!vis[i]) {
            queue<int> q;
            vis[i] = true;
            q.push(i);

            // BFS starting from ith node
            while (!q.empty()) {
                int g_node = q.front();
                q.pop();
                bfs_traversal.push_back(g_node);
                for (auto it : adj[g_node]) {
                    if (!vis[it]) {
                        vis[it] = true;
                        q.push(it);
                    }
                }
            }
        }
    }
    return bfs_traversal;
}

 int main()
 {
     Graph g(7);
     g.addEdge(1,2);
     g.addEdge(1,3);
     g.addEdge(2,4);
     g.addEdge(2,5);
     g.addEdge(3,6);
     g.addEdge(6,2);
     g.BFS(1);
     vector<int>v=g.bfsOfGraph(g.V,g.adj);
     return 0;






 }
